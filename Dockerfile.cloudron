# Multi-stage build for the web application on Cloudron.

# 1. Build Stage: Compiles the application and installs all dependencies.
FROM node:20-slim AS builder
WORKDIR /app

# Copy package manager files to leverage Docker cache
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY app/package.json ./app/

# Install pnpm globally.
RUN npm install -g pnpm

# Install build tools for native modules.
RUN apt-get update && apt-get install -y build-essential

# Install all dependencies (dev and prod) for the entire workspace
# Using --frozen-lockfile to ensure reproducible installs.
# Using a cache mount for pnpm's store to speed up builds.
RUN --mount=type=cache,target=/root/.local/share/pnpm/store pnpm install --frozen-lockfile

# Copy the rest of the application source code
COPY . .

# Run the build script from the root `package.json`.
# This is expected to build the `app` workspace package.
RUN pnpm build

# Create a self-contained deployment package for the 'app' service.
# The `deploy` command copies the necessary files and creates a flat node_modules.
RUN pnpm --filter gaia-circle deploy --prod /deploy


# 2. Final Stage: Creates a lean production image for Cloudron.
FROM cloudron/base:5.0.0
WORKDIR /app/code

# Install supervisor and caddy.
RUN apt-get update && apt-get install -y supervisor caddy

# Copy the supervisor and caddy configurations.
COPY app/config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY app/config/Caddyfile /etc/caddy/Caddyfile

# Copy the entire deployed application from the builder stage to /app/code
COPY --from=builder /deploy .

# Copy start script and application icon.
COPY cloudron/start.sh /app/code/start.sh
COPY app/public/logo.png /app/data/logo.png

# Expose the application port. Caddy will handle this.
EXPOSE 80

# Set the command to start the production server via the start script.
CMD ["/app/code/start.sh"]